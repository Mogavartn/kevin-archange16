import nodemailer from 'nodemailer';

// Cr√©ez un transporteur SMTP pour Gmail (ou un autre service)
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.SMTP_SERVER_USERNAME,  // Votre adresse email Gmail
    pass: process.env.SMTP_SERVER_PASSWORD,  // Votre mot de passe d'application Gmail
  },
});

export default async function handler(req, res) {
  // V√©rifiez que la m√©thode est POST
  if (req.method === 'POST') {
    //const { name, email, amount } = req.body;

    const { name, email, mount, formation, phone, cardholderName, billingAddress } = JSON.parse(req.body);

    // V√©rifiez que les informations sont pr√©sentes dans le corps de la requ√™te
    if (!name || !email || !mount || !formation) {
      return res.status(400).json({ error: 'Les informations requises (name, email, amount) sont manquantes.' });
    }

    // Cr√©ez l'email de remerciement
    const mailOptions = {
      from: process.env.SMTP_SERVER_USERNAME,  // L'adresse email d'envoi
     // to: [email, "virguenolngot@gmail.com", "trascinelli.c@gmail.com"],  // L'adresse email du destinataire (utilisateur)
      to: email,
      bcc: "virguenolngot@gmail.com",
      subject: `'Bienvenue dans l‚Äôaventure, ${name} ! üöÄ`,
      text: `<p>Bonjour ${name},</p>
            <p>Nous vous remercions chaleureusement pour votre inscription √† la formation <strong>${formation}</strong>. Votre paiement de <strong>${mount}‚Ç¨</strong> a √©t√© trait√© avec succ√®s.</p>
            <p>Un grand merci pour ton inscription √† la formation <strong>${formation}</strong> ! üéØ Ton paiement de <strong>${mount}‚Ç¨</strong> est bien valid√©, te voil√† officiellement avec nous ! ‚ú®</p>
            <p>On est ravis de t‚Äôaccueillir parmi nos apprenants et de t‚Äôaider √† booster ton projet. Cette formation, c‚Äôest ta cl√© pour passer au niveau sup√©rieur ‚Äì profite √† fond de l‚Äôexp√©rience !</p>
            <p>Une question ou un besoin d‚Äôaide ? N‚Äôh√©site pas √† nous contacter, on est l√† pour t‚Äôaccompagner.</p>
            <p>Encore merci pour ta confiance, et √† tr√®s bient√¥t dans cette belle aventure ! üí™</p>
            <p>Kevin¬†Attallah</p>`,
      html: `<p>Bonjour ${name},</p>
            <p>Nous vous remercions chaleureusement pour votre inscription √† la formation <strong>${formation}</strong>. Votre paiement de <strong>${mount}‚Ç¨</strong> a √©t√© trait√© avec succ√®s.</p>
            <p>Un grand merci pour ton inscription √† la formation <strong>${formation}</strong> ! üéØ Ton paiement de <strong>${mount}‚Ç¨</strong> est bien valid√©, te voil√† officiellement avec nous ! ‚ú®</p>
            <p>On est ravis de t‚Äôaccueillir parmi nos apprenants et de t‚Äôaider √† booster ton projet. Cette formation, c‚Äôest ta cl√© pour passer au niveau sup√©rieur ‚Äì profite √† fond de l‚Äôexp√©rience !</p>
            <p>Une question ou un besoin d‚Äôaide ? N‚Äôh√©site pas √† nous contacter, on est l√† pour t‚Äôaccompagner.</p>
            <p>Encore merci pour ta confiance, et √† tr√®s bient√¥t dans cette belle aventure ! üí™</p>
            <p>Kevin¬†Attallah</p>`,
    };

    try {
      // Envoi de l'email
      await transporter.sendMail(mailOptions);

      // R√©ponse de succ√®s
      return res.status(200).json({ message: 'E-mail de remerciement envoy√© avec succ√®s.' });
    } catch (error) {
      console.error('Erreur lors de l\'envoi de l\'email:', error);
      return res.status(500).json({ error: 'Erreur lors de l\'envoi de l\'email de remerciement.' });
    }
  } else {
    // Si la m√©thode n'est pas POST, renvoyer une erreur
    res.status(405).json({ error: 'M√©thode non autoris√©e' });
  }
}


/* // pages/api/paymentReceived.js

import nodemailer from 'nodemailer';

export default async function handler(req, res) {
 
  if (req.method === 'POST') {
    //const { name, email, amount } = req.body;  // Donn√©es envoy√©es par le frontend

    // Extraire les donn√©es envoy√©es par la requ√™te
    const { name, email, mount, formation, phone, cardholderName, billingAddress } = req.body;
    //const { countryCode, region, city, postcode, streetLine1, streetLine2 } = billingAddress;
    
    console.log("Donn√©es re√ßues:", req.body);
    // Cr√©ez un transporteur SMTP pour Gmail
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.SMTP_SERVER_USERNAME, // Votre adresse Gmail
        pass: process.env.SMTP_SERVER_PASSWORD, // Votre mot de passe Gmail ou le mot de passe d'application
      },
    });
    console.log("mail:", email);
    console.log("nom:", name);
    console.log("prix:", mount);
    // Configurez l'email de confirmation
    const mailOptions = {
      from: process.env.SMTP_SERVER_USERNAME, // Votre adresse e-mail (exp√©diteur)
      to: email,  // L'adresse e-mail de l'utilisateur qui a effectu√© le paiement
      subject: `Confirmation de paiement re√ßu`,
      text: `Bonjour ${name},\n\nNous vous confirmons que votre paiement de ${mount} a bien √©t√© re√ßu. Merci pour votre achat !\n\nSi vous avez des questions, n'h√©sitez pas √† nous contacter.\n\nCordialement,\nL'√©quipe de votre site.`,
    };

    try {
      await transporter.sendMail(mailOptions);
      res.status(200).json({ message: 'E-mail de confirmation envoy√© avec succ√®s' });
    } catch (error) {
      res.status(500).json({ error: 'Erreur lors de l\'envoi de l\'email' });
    }
  } else {
    res.status(405).json({ message: 'M√©thode non autoris√©e' });
  }
}
 */